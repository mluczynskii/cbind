{#- callback.c.j2 -#}
{%- import "macros.c.j2" as macros with context -%}
void {{ pointer["callback"] }}(void *data, va_alist args) {
  closure_t *c = (closure_t *)data;
  lua_State *L = (lua_State *)c->L;
  lua_rawgeti(L, LUA_REGISTRYINDEX, c->key);
  va_start_{{ pointer["returns"]["typename"] }}(args);
  {%- for argument in pointer["arguments"] %}
  {{ argument["typename"] ~ " arg" ~ loop.index }} = va_arg_{{ argument["typename"] }}(args);
  {{ macros.push("L", "arg" ~ loop.index, argument) | indent(2) }}
  {%- endfor %}
  lua_pcall(L, {{ pointer["arguments"] | length }}, {{1 if pointer["returns"]["kind"] != "void_type" else 0}}, 0);
  {% if pointer["returns"]["kind"] != "void_type" -%}
  {{ macros.unsafe_fetch("L", -1, "result", pointer["returns"]) | indent(2) }}
  va_return_{{ pointer["returns"]["typename"] }}(args, result);
  {%- else -%}
  va_return_void(args);
  {%- endif %}
}